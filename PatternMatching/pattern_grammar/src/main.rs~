fn main() 
{
    // 匹配字面值
    let x = 1;
    match x {
        1 => println!("one"),
        2 => println!("two"),
        3 => println!("three"),
        _ => println!("anything"),
    }

    // 匹配命名变量
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(y) => println!("Matched, y = {:?}", y),
        _ => println!("Default case, x = {:?}", x),
    }
    println!("at the end: x = {:?}, y = {:?}",x , y);

    // 使用| 匹配多个模式
    let x = 1;
    match x {
        1 | 2 => println!("one or two"),
        3 => println!("three"),
        _ => println!("anything"),
    }

    // 使用 ... 匹配值的范围
    let x = 5;
    match x {
        1 ... 5 => println!("one through five"),
    _ => println!("something else"),
    }

    // 解构结构体,通过带有模式的let语句将其分解
    let p = Point {x: 0,y: 7};

    // let Point {x: a, y: b} = p;
    // assert_eq!(0, a);
    // assert_eq!(7, b);

    match p {
        Point {x, y: 0} => println!("On the x axis at {}",x),
        Point {x: 0, y} => println!("On the y axis at {}",y),
        Point {x, y} => println!("On neither axis: ({}, {})",x,y),
    }

    // 解构枚举
    let msg = Message::ChangeColor_old(0, 160, 255);

    match msg {
        Message::Quit => {
            println!("The Quit variant has no data to destructure.")
        },

        Message::Move {x, y} => {
            println!("Move in the x direction {} and in the y direction {}",x, y);
        },

        Message::Write(text) => println!("Text message: {}", text),

        Message::ChangeColor_old(r, g, b) => {
            println!("Change the color to red {}, green {}, and blue {}",r, g, b)
        },
    }

    // 解构嵌套的枚举
    let msg = new_Message::ChangeColor(Color::Hsv(0, 160, 255));

    match msg {
        new_Message::ChangeColor(Color::Rgb(r, g, b)) => {
            println!("Change the color to red {}, green {}, and blue {}",r, g, b)     
        },
        new_Message::ChangeColor(Color::Hsv(h, s, v)) => {
            println!("Change the color to hue {}, saturation {}, and value {}",h, s, v)
        },

        _ => (),
    }

    // 解构引用
    let points = vec![
        Point{x: 0, y: 0},
        Point{x: 1, y: 5},
        Point{x: 10, y: -3},
    ];

    let sum_of_squares: i32 = points
        .iter()
        .map(|&Point {x,y}| x * x + y * y)
        .sum();

    foo(3, 4);

    // 使用嵌套的_忽略部分值
    let mut setting_value = Some(5);
    let new_setting_value = Some(10);

    match (setting_value, new_setting_value) {
    (Some(_), Some(_)) => {
        println!("Can't overwrite an existing customized value");
    }
    _ => {
            setting_value = new_setting_value;
         }
    }

    println!("setting is {:?}", setting_value);

    let _x = 5;
    let y = 10;

    let origin = Point { x: 0, y: 0, z: 0 };

    match origin {
        Point { x, .. } => println!("x is {}", x),
    }

}

struct Point
{
    x: i32,
    y: i32,
}

enum Color {
   Rgb(i32, i32, i32),
   Hsv(i32, i32, i32)
}

enum Message
{
    Quit,
    Move {x: i32, y: i32},
    Write(String),
    ChangeColor_old(i32, i32, i32),
}

enum new_Message
{
    Quit,
    Move {x: i32, y: i32},
    Write(String),
    ChangeColor(Color),    // 枚举嵌套枚举
}

// 使用_忽略整个值
fn foo(_: i32, y: i32) 
{
    println!("This code only uses the y parameter: {}", y);
}
